/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common'

export interface IMembershipInterface extends utils.Interface {
  functions: {
    'provideMembership(address[],string[])': FunctionFragment
    'revokeMembership(address[])': FunctionFragment
  }

  getFunction(nameOrSignatureOrTopic: 'provideMembership' | 'revokeMembership'): FunctionFragment

  encodeFunctionData(
    functionFragment: 'provideMembership',
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string
  encodeFunctionData(
    functionFragment: 'revokeMembership',
    values: [PromiseOrValue<string>[]]
  ): string

  decodeFunctionResult(functionFragment: 'provideMembership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'revokeMembership', data: BytesLike): Result

  events: {}
}

export interface IMembership extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: IMembershipInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    provideMembership(
      users: PromiseOrValue<string>[],
      tokenURIs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    revokeMembership(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  provideMembership(
    users: PromiseOrValue<string>[],
    tokenURIs: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  revokeMembership(
    users: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    provideMembership(
      users: PromiseOrValue<string>[],
      tokenURIs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>

    revokeMembership(users: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>
  }

  filters: {}

  estimateGas: {
    provideMembership(
      users: PromiseOrValue<string>[],
      tokenURIs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    revokeMembership(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    provideMembership(
      users: PromiseOrValue<string>[],
      tokenURIs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    revokeMembership(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
