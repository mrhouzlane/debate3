/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../common'
import type { Forum, ForumInterface } from '../Forum'

const _abi = [
  {
    inputs: [
      {
        internalType: 'address[]',
        name: '_moderators',
        type: 'address[]',
      },
      {
        internalType: 'address',
        name: '_membershipNFT',
        type: 'address',
      },
      {
        internalType: 'string',
        name: '_baseURI',
        type: 'string',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'baseURI',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'initialized',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'moderatorsCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'users',
        type: 'address[]',
      },
      {
        internalType: 'string[]',
        name: 'tokenURIs',
        type: 'string[]',
      },
    ],
    name: 'provideMembership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'users',
        type: 'address[]',
      },
    ],
    name: 'revokeMembership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

const _bytecode =
  '0x60a06040523480156200001157600080fd5b5060405162000b8a38038062000b8a8339810160408190526200003491620002db565b6001805460ff1615151415620000905760405162461bcd60e51b815260206004820152601360248201527f616c726561647920696e697469616c697a656400000000000000000000000000604482015260640160405180910390fd5b82516001600160a01b03831660805260005b818110156200010d57600160036000878481518110620000c657620000c6620003ce565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806200010481620003e4565b915050620000a2565b506001805460ff19168117905581516200012f9060029060208501906200013a565b50505050506200044b565b82805462000148906200040e565b90600052602060002090601f0160209004810192826200016c5760008555620001b7565b82601f106200018757805160ff1916838001178555620001b7565b82800160010185558215620001b7579182015b82811115620001b75782518255916020019190600101906200019a565b50620001c5929150620001c9565b5090565b5b80821115620001c55760008155600101620001ca565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620002215762000221620001e0565b604052919050565b80516001600160a01b03811681146200024157600080fd5b919050565b600082601f8301126200025857600080fd5b81516001600160401b03811115620002745762000274620001e0565b60206200028a601f8301601f19168201620001f6565b82815285828487010111156200029f57600080fd5b60005b83811015620002bf578581018301518282018401528201620002a2565b83811115620002d15760008385840101525b5095945050505050565b600080600060608486031215620002f157600080fd5b83516001600160401b03808211156200030957600080fd5b818601915086601f8301126200031e57600080fd5b8151602082821115620003355762000335620001e0565b8160051b62000346828201620001f6565b928352848101820192828101908b8511156200036157600080fd5b958301955b848710156200038a576200037a8762000229565b8252958301959083019062000366565b98506200039c91505088820162000229565b955050506040860151915080821115620003b557600080fd5b50620003c48682870162000246565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200040757634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806200042357607f821691505b602082108114156200044557634e487b7160e01b600052602260045260246000fd5b50919050565b60805161071c6200046e600039600081816101db01526102be015261071c6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063158ef93e1461005c5780636c0360eb1461007e5780638971b46414610093578063c5788d2b146100a8578063c7fbe1d0146100bf575b600080fd5b6001546100699060ff1681565b60405190151581526020015b60405180910390f35b6100866100d2565b6040516100759190610375565b6100a66100a136600461047b565b610160565b005b6100b160005481565b604051908152602001610075565b6100a66100cd3660046105a5565b610248565b600280546100df906105e2565b80601f016020809104026020016040519081016040528092919081815260200182805461010b906105e2565b80156101585780601f1061012d57610100808354040283529160200191610158565b820191906000526020600020905b81548152906001019060200180831161013b57829003601f168201915b505050505081565b3360009081526003602052604090205460ff166101c45760405162461bcd60e51b815260206004820152601d60248201527f43616c6c6572206973206e6f7420616c6c6f77656420746f206d696e7400000060448201526064015b60405180910390fd5b60405163225c6d1960e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638971b464906102129085908590600401610661565b600060405180830381600087803b15801561022c57600080fd5b505af1158015610240573d6000803e3d6000fd5b505050505050565b3360009081526003602052604090205460ff166102a75760405162461bcd60e51b815260206004820152601d60248201527f43616c6c6572206973206e6f7420616c6c6f77656420746f206d696e7400000060448201526064016101bb565b604051630c7fbe1d60e41b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c7fbe1d0906102f39084906004016106d3565b600060405180830381600087803b15801561030d57600080fd5b505af1158015610321573d6000803e3d6000fd5b5050505050565b6000815180845260005b8181101561034e57602081850181015186830182015201610332565b81811115610360576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006103886020830184610328565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156103ce576103ce61038f565b604052919050565b600067ffffffffffffffff8211156103f0576103f061038f565b5060051b60200190565b600082601f83011261040b57600080fd5b8135602061042061041b836103d6565b6103a5565b82815260059290921b8401810191818101908684111561043f57600080fd5b8286015b848110156104705780356001600160a01b03811681146104635760008081fd5b8352918301918301610443565b509695505050505050565b600080604080848603121561048f57600080fd5b833567ffffffffffffffff808211156104a757600080fd5b6104b3878388016103fa565b94506020915081860135818111156104ca57600080fd5b8601601f80820189136104dc57600080fd5b81356104ea61041b826103d6565b81815260059190911b8301850190858101908b83111561050957600080fd5b8685015b83811015610592578035878111156105255760008081fd5b8601603f81018e136105375760008081fd5b888101358881111561054b5761054b61038f565b61055c818801601f19168b016103a5565b8181528f8c8385010111156105715760008081fd5b818c84018c83013760009181018b019190915284525091870191870161050d565b5080985050505050505050509250929050565b6000602082840312156105b757600080fd5b813567ffffffffffffffff8111156105ce57600080fd5b6105da848285016103fa565b949350505050565b600181811c908216806105f657607f821691505b6020821081141561061757634e487b7160e01b600052602260045260246000fd5b50919050565b600081518084526020808501945080840160005b838110156106565781516001600160a01b031687529582019590820190600101610631565b509495945050505050565b604081526000610674604083018561061d565b6020838203818501528185518084528284019150828160051b85010183880160005b838110156106c457601f198784030185526106b2838351610328565b94860194925090850190600101610696565b50909998505050505050505050565b602081526000610388602083018461061d56fea264697066735822122019b1326f8cdb74d696ebdb581bef56a1da33d0cfc5e9e3b005891758bd75447064736f6c63430008090033'

type ForumConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: ForumConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class Forum__factory extends ContractFactory {
  constructor(...args: ForumConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(
    _moderators: PromiseOrValue<string>[],
    _membershipNFT: PromiseOrValue<string>,
    _baseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Forum> {
    return super.deploy(_moderators, _membershipNFT, _baseURI, overrides || {}) as Promise<Forum>
  }
  override getDeployTransaction(
    _moderators: PromiseOrValue<string>[],
    _membershipNFT: PromiseOrValue<string>,
    _baseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_moderators, _membershipNFT, _baseURI, overrides || {})
  }
  override attach(address: string): Forum {
    return super.attach(address) as Forum
  }
  override connect(signer: Signer): Forum__factory {
    return super.connect(signer) as Forum__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): ForumInterface {
    return new utils.Interface(_abi) as ForumInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Forum {
    return new Contract(address, _abi, signerOrProvider) as Forum
  }
}
